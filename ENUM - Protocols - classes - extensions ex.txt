enum Result {
    case excellent
    case veryGood
    case good
    case pass
    case fail
}
protocol analyzeGrade{
    func analyze(grade:Result)->String
}
class Student {
    var name: String!
    var age: Int!
    var city: String!
    var overAll: Result?
    func setData(name:String,age:Int,city:String,overAll:Result){
        self.name = name
        self.age = age
        self.city = city
        self.overAll = overAll
    }
    func getData(){
        print("The Name is \(self.name ?? ""), The Age is \(self.age ?? 0), Address is \(self.city ?? ""), Grade : \(self.analyze(grade: self.overAll ?? .fail))")
    }
}
extension Student: analyzeGrade{
    func analyze(grade: Result) -> String {
        switch self.overAll {
        case .excellent: return "A"
        case .veryGood: return "B"
        case .good: return "C"
        case .pass: return "D"
        case .fail: return "F"
        case .none: return "UnRecognized Degree"
        }
    }
}
var std1 = Student()
std1.setData(name: "Ahmed", age: 25, city: "Cairo", overAll: .veryGood)
std1.getData()